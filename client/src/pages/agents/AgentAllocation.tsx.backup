import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { 
  Search, 
  UserPlus, 
  Edit, 
  Eye, 
  Users, 
  UserCheck, 
  Mail,
  CheckSquare,
  Save
} from "lucide-react";
import { LoadingSpinner } from "@/components/ui/loading-spinner";
import { useUsers, useAgentAssignmentsList, useCreateAgentAssignment } from '../../hooks/useApi';
import { User } from '../../types';
import { useToast } from '../../hooks/use-toast';

// Helper function to format last login
const formatLastLogin = (lastLogin: string | null) => {
  if (!lastLogin) return 'Never';
  return new Date(lastLogin).toLocaleDateString();
};

interface AgentAssignment {
  _id: string;
  agentId: {
    _id: string;
    firstName: string;
    lastName: string;
    email: string;
  };
  assignedHRs: Array<{
    _id: string;
    firstName: string;
    lastName: string;
    email: string;
  }>;
  assignedCandidates: Array<{
    _id: string;
    firstName: string;
    lastName: string;
    email: string;
  }>;
  notes?: string;
}

export default function AgentAllocation() {
  const [searchTerm, setSearchTerm] = useState('');
  const [allocationTab, setAllocationTab] = useState<'allocated' | 'not-allocated'>('not-allocated');
  const [selectedResource, setSelectedResource] = useState<User | null>(null);
  const [isAllocationDialogOpen, setIsAllocationDialogOpen] = useState(false);
  const [selectedAgent, setSelectedAgent] = useState<string>('');
  const [assignmentNotes, setAssignmentNotes] = useState('');
  const [loading, setLoading] = useState(false);
  const [selectedResources, setSelectedResources] = useState<Set<string>>(new Set());
  const [selectAll, setSelectAll] = useState(false);

  const { toast } = useToast();

  // Fetch users data
  const { 
    data: usersResponse, 
    loading: usersLoading, 
    error: usersError,
    refetch: refetchUsers 
  } = useUsers({
    limit: 100,
  });

  // Fetch agent assignments
  const {
    data: assignmentsResponse,
    loading: assignmentsLoading,
    error: assignmentsError,
    refetch: refetchAssignments
  } = useAgentAssignmentsList();

  // API hooks for assignment operations
  const { execute: createAgentAssignment } = useCreateAgentAssignment();

  // Handle response format
  const users = Array.isArray(usersResponse) ? usersResponse : (usersResponse?.data || []);
  const assignments = Array.isArray(assignmentsResponse) ? assignmentsResponse : (assignmentsResponse?.data || []);

  // Filter users by role
  const agents = users.filter(user => user.role === 'agent' && user.status === 'active');
  const hrUsers = users.filter(user => user.role === 'hr' && user.status === 'active');
  const candidates = users.filter(user => user.role === 'candidate' && user.status === 'active');
  
  // Combine HR users and candidates into a single resources list
  const allResources = [...hrUsers, ...candidates];

  // Clear selections when switching allocation tabs
  useEffect(() => {
    setSelectedResources(new Set());
    setSelectAll(false);
  }, [allocationTab]);

  // Get current agent assignment for a resource
  const getCurrentAgent = (resourceId: string, resourceType: 'hr' | 'candidate') => {
    if (!assignments || !Array.isArray(assignments)) return null;
    
    const assignment = assignments.find((a: any) => {
      if (resourceType === 'hr') {
        return a.assignedHRs?.some((hr: any) => hr._id === resourceId);
      } else {
        return a.assignedCandidates?.some((c: any) => c._id === resourceId);
      }
    });
    return assignment?.agentId || null;
  };

  // Filter resources based on search and allocation status
  const getFilteredResources = () => {
    if (!allResources || !assignments) return [];
    
    const searchFiltered = allResources.filter(resource =>
      resource.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      resource.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      resource.email.toLowerCase().includes(searchTerm.toLowerCase())
    );

    return searchFiltered.filter(resource => {
      const resourceType = resource.role === 'hr' ? 'hr' : 'candidate';
      const currentAgent = getCurrentAgent(resource._id, resourceType);
      const isAllocated = !!currentAgent;
      return allocationTab === 'allocated' ? isAllocated : !isAllocated;
    });
  };

  const filteredResources = getFilteredResources();

  // Count allocated and unallocated resources
  const getAllocatedCount = () => {
    if (!allResources || !assignments) return 0;
    return allResources.filter(resource => {
      const resourceType = resource.role === 'hr' ? 'hr' : 'candidate';
      return getCurrentAgent(resource._id, resourceType);
    }).length;
  };

  const getUnallocatedCount = () => {
    if (!allResources || !assignments) return 0;
    return allResources.filter(resource => {
      const resourceType = resource.role === 'hr' ? 'hr' : 'candidate';
      return !getCurrentAgent(resource._id, resourceType);
    }).length;
  };

  const openAllocationDialog = (resource: User) => {
    setSelectedResource(resource);
    setSelectedAgent('');
    setAssignmentNotes('');
    setIsAllocationDialogOpen(true);
  };

  // Bulk selection functions for resources
  const handleResourceSelection = (resourceId: string) => {
    const newSelected = new Set(selectedResources);
    if (newSelected.has(resourceId)) {
      newSelected.delete(resourceId);
    } else {
      newSelected.add(resourceId);
    }
    setSelectedResources(newSelected);
    setSelectAll(newSelected.size === filteredResources.length && filteredResources.length > 0);
  };

  const handleSelectAllResources = () => {
    if (selectAll) {
      setSelectedResources(new Set());
      setSelectAll(false);
    } else {
      setSelectedResources(new Set(filteredResources.map(resource => resource._id)));
      setSelectAll(true);
    }
  };

  // Bulk allocation function
  const handleBulkAllocation = async () => {
    if (!selectedAgent) return;
    if (selectedResources.size === 0) return;

    setLoading(true);
    try {
      // Find existing assignment for the selected agent
      const existingAssignment = assignments.find((a: any) => a.agentId?._id === selectedAgent);
      
      // Separate selected resources by type
      const selectedHRIds: string[] = [];
      const selectedCandidateIds: string[] = [];
      
      selectedResources.forEach(resourceId => {
        const resource = allResources.find(r => r._id === resourceId);
        if (resource?.role === 'hr') {
          selectedHRIds.push(resourceId);
        } else if (resource?.role === 'candidate') {
          selectedCandidateIds.push(resourceId);
        }
      });
      
      const existingHRs = existingAssignment?.assignedHRs?.map((hr: any) => hr._id) || [];
      const existingCandidates = existingAssignment?.assignedCandidates?.map((c: any) => c._id) || [];
      
      const assignmentData = {
        agentId: selectedAgent,
        hrIds: [...new Set([...existingHRs, ...selectedHRIds])],
        candidateIds: [...new Set([...existingCandidates, ...selectedCandidateIds])],
        notes: assignmentNotes,
      };

      await createAgentAssignment(assignmentData);
      
      const agentName = agents.find(a => a._id === selectedAgent);
      toast({
        title: "Success",
        description: `Assigned ${selectedResources.size} resource${selectedResources.size !== 1 ? 's' : ''} to ${agentName?.firstName} ${agentName?.lastName}`,
      });

      // Clear selections
      setSelectedResources(new Set());
      setSelectAll(false);
      
      refetchAssignments();
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to save bulk allocation",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  // Bulk deallocation function
  const handleBulkDeallocation = async () => {
    if (selectedResources.size === 0) return;

    setLoading(true);
    try {
      // For each selected resource, find their current agent assignment and remove them
      for (const resourceId of selectedResources) {
        const resource = allResources.find(r => r._id === resourceId);
        const resourceType = resource?.role === 'hr' ? 'hr' : 'candidate';
        const currentAgent = getCurrentAgent(resourceId, resourceType);
        
        if (currentAgent) {
          const existingAssignment = assignments.find((a: any) => a.agentId?._id === currentAgent._id);
          if (existingAssignment) {
            let assignmentData;
            if (resourceType === 'hr') {
              const remainingHRs = existingAssignment.assignedHRs
                ?.map((hr: any) => hr._id)
                .filter((id: string) => id !== resourceId) || [];
              const existingCandidates = existingAssignment.assignedCandidates?.map((c: any) => c._id) || [];
              
              assignmentData = {
                agentId: currentAgent._id,
                hrIds: remainingHRs,
                candidateIds: existingCandidates,
                notes: existingAssignment.notes || '',
              };
            } else {
              const existingHRs = existingAssignment.assignedHRs?.map((hr: any) => hr._id) || [];
              const remainingCandidates = existingAssignment.assignedCandidates
                ?.map((c: any) => c._id)
                .filter((id: string) => id !== resourceId) || [];
              
              assignmentData = {
                agentId: currentAgent._id,
                hrIds: existingHRs,
                candidateIds: remainingCandidates,
                notes: existingAssignment.notes || '',
              };
            }

            await createAgentAssignment(assignmentData);
          }
        }
      }
      
      toast({
        title: "Success",
        description: `Removed ${selectedResources.size} resource${selectedResources.size !== 1 ? 's' : ''} from their agent assignments`,
      });

      // Clear selections
      setSelectedResources(new Set());
      setSelectAll(false);
      
      refetchAssignments();
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to remove allocations",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSaveAllocation = async () => {
    if (!selectedResource || !selectedAgent) return;

    setLoading(true);
    try {
      // Find existing assignment for the selected agent
      const existingAssignment = assignments.find((a: any) => a.agentId?._id === selectedAgent);
      
      let assignmentData;
      if (selectedResource.role === 'hr') {
        const existingHRs = existingAssignment?.assignedHRs?.map((hr: any) => hr._id) || [];
        const existingCandidates = existingAssignment?.assignedCandidates?.map((c: any) => c._id) || [];
        
        assignmentData = {
          agentId: selectedAgent,
          hrIds: [...new Set([...existingHRs, selectedResource._id])],
          candidateIds: existingCandidates,
          notes: assignmentNotes,
        };
      } else {
        const existingHRs = existingAssignment?.assignedHRs?.map((hr: any) => hr._id) || [];
        const existingCandidates = existingAssignment?.assignedCandidates?.map((c: any) => c._id) || [];
        
        assignmentData = {
          agentId: selectedAgent,
          hrIds: existingHRs,
          candidateIds: [...new Set([...existingCandidates, selectedResource._id])],
          notes: assignmentNotes,
        };
      }

      await createAgentAssignment(assignmentData);
      
      const agentName = agents.find(a => a._id === selectedAgent);
      toast({
        title: "Success",
        description: `Successfully allocated ${selectedResource.firstName} ${selectedResource.lastName} to ${agentName?.firstName} ${agentName?.lastName}`,
      });

      setIsAllocationDialogOpen(false);
      setSelectedResource(null);
      setSelectedAgent('');
      setAssignmentNotes('');
      refetchAssignments();
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to save allocation",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6 p-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Agent Allocation</h1>
          <p className="text-muted-foreground">
            Manage HR users and candidates allocation to recruitment agents
          </p>
        </div>
      </div>

      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            {/* Allocation Status Tabs */}
            <Tabs value={allocationTab} onValueChange={(value) => setAllocationTab(value as 'allocated' | 'not-allocated')}>
              <TabsList>
                <TabsTrigger value="not-allocated">
                  Not Allocated ({getUnallocatedCount()})
                </TabsTrigger>
                <TabsTrigger value="allocated">
                  Allocated ({getAllocatedCount()})
                </TabsTrigger>
              </TabsList>
            </Tabs>
            <div className="relative">
              <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search HR users and candidates..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 w-80"
              />
            </div>
          </div>
        </CardHeader>
        <CardContent>

            <TabsContent value="not-allocated" className="mt-6">
              {/* Bulk Actions Toolbar */}
              {selectedResources.size > 0 && (
                <div className="border-b border-primary/20 bg-primary/5 p-4 mb-4 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <CheckSquare className="h-4 w-4 text-primary" />
                      <span className="text-sm font-medium">
                        {selectedResources.size} resource{selectedResources.size !== 1 ? 's' : ''} selected
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Select value={selectedAgent} onValueChange={setSelectedAgent}>
                        <SelectTrigger className="w-48">
                          <SelectValue placeholder="Select agent..." />
                        </SelectTrigger>
                        <SelectContent>
                          {agents.map((agent) => (
                            <SelectItem key={agent._id} value={agent._id}>
                              {agent.firstName} {agent.lastName}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <Button 
                        onClick={handleBulkAllocation}
                        disabled={!selectedAgent || loading}
                        size="sm"
                      >
                        {loading ? <LoadingSpinner /> : 'Allocate Selected'}
                      </Button>
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={() => {
                          setSelectedResources(new Set());
                          setSelectAll(false);
                        }}
                      >
                        Clear Selection
                      </Button>
                    </div>
                  </div>
                </div>
              )}

              {usersLoading ? (
                <div className="flex justify-center py-8">
                  <LoadingSpinner />
                </div>
              ) : (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-[50px]">
                        <Checkbox
                          checked={selectAll}
                          onCheckedChange={handleSelectAllResources}
                          aria-label="Select all resources"
                        />
                      </TableHead>
                      <TableHead>Name</TableHead>
                      <TableHead>Type</TableHead>
                      <TableHead>Email</TableHead>
                      <TableHead>Last Login</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredResources.map((resource) => (
                      <TableRow key={resource._id}>
                        <TableCell>
                          <Checkbox
                            checked={selectedResources.has(resource._id)}
                            onCheckedChange={() => handleResourceSelection(resource._id)}
                            aria-label={`Select ${resource.firstName} ${resource.lastName}`}
                          />
                        </TableCell>
                        <TableCell className="font-medium">
                          <div className="flex items-center gap-3">
                            <div className={`flex items-center justify-center w-8 h-8 rounded-full ${
                              resource.role === 'hr' ? 'bg-green-100' : 'bg-purple-100'
                            }`}>
                              {resource.role === 'hr' ? (
                                <UserCheck className="w-4 h-4 text-green-600" />
                              ) : (
                                <Users className="w-4 h-4 text-purple-600" />
                              )}
                            </div>
                            <div>
                              <p className="font-medium">{resource.firstName} {resource.lastName}</p>
                              <p className="text-sm text-muted-foreground">{resource.role === 'hr' ? 'HR User' : 'Candidate'}</p>
                            </div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge variant="outline" className={resource.role === 'hr' ? 'text-green-600' : 'text-purple-600'}>
                            {resource.role === 'hr' ? 'HR' : 'Candidate'}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            <Mail className="h-4 w-4 text-muted-foreground" />
                            {resource.email}
                          </div>
                        </TableCell>
                        <TableCell>{formatLastLogin(resource.lastLoginAt)}</TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => openAllocationDialog(resource)}
                            >
                              <UserPlus className="h-4 w-4 mr-1" />
                              Allocate
                            </Button>
                            <Button variant="ghost" size="sm">
                              <Eye className="h-4 w-4 mr-1" />
                              View
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              )}
            </TabsContent>

            <TabsContent value="allocated" className="mt-6">
              {/* Bulk Actions Toolbar for Allocated */}
              {selectedResources.size > 0 && (
                <div className="border-b border-primary/20 bg-primary/5 p-4 mb-4 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <CheckSquare className="h-4 w-4 text-primary" />
                      <span className="text-sm font-medium">
                        {selectedResources.size} resource{selectedResources.size !== 1 ? 's' : ''} selected
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button 
                        onClick={handleBulkDeallocation}
                        disabled={loading}
                        size="sm"
                        variant="destructive"
                      >
                        {loading ? <LoadingSpinner /> : 'Remove Selected'}
                      </Button>
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={() => {
                          setSelectedResources(new Set());
                          setSelectAll(false);
                        }}
                      >
                        Clear Selection
                      </Button>
                    </div>
                  </div>
                </div>
              )}

              {usersLoading ? (
                <div className="flex justify-center py-8">
                  <LoadingSpinner />
                </div>
              ) : (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-[50px]">
                        <Checkbox
                          checked={selectAll}
                          onCheckedChange={handleSelectAllResources}
                          aria-label="Select all resources"
                        />
                      </TableHead>
                      <TableHead>Name</TableHead>
                      <TableHead>Type</TableHead>
                      <TableHead>Email</TableHead>
                      <TableHead>Last Login</TableHead>
                      <TableHead>Current Agent</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredResources.map((resource) => {
                      const resourceType = resource.role === 'hr' ? 'hr' : 'candidate';
                      const currentAgent = getCurrentAgent(resource._id, resourceType);
                      const agentInfo = currentAgent ? agents.find(a => a._id === currentAgent._id) : null;
                      
                      return (
                        <TableRow key={resource._id}>
                          <TableCell>
                            <Checkbox
                              checked={selectedResources.has(resource._id)}
                              onCheckedChange={() => handleResourceSelection(resource._id)}
                              aria-label={`Select ${resource.firstName} ${resource.lastName}`}
                            />
                          </TableCell>
                          <TableCell className="font-medium">
                            <div className="flex items-center gap-3">
                              <div className={`flex items-center justify-center w-8 h-8 rounded-full ${
                                resource.role === 'hr' ? 'bg-green-100' : 'bg-purple-100'
                              }`}>
                                {resource.role === 'hr' ? (
                                  <UserCheck className="w-4 h-4 text-green-600" />
                                ) : (
                                  <Users className="w-4 h-4 text-purple-600" />
                                )}
                              </div>
                              <div>
                                <p className="font-medium">{resource.firstName} {resource.lastName}</p>
                                <p className="text-sm text-muted-foreground">{resource.role === 'hr' ? 'HR User' : 'Candidate'}</p>
                              </div>
                            </div>
                          </TableCell>
                          <TableCell>
                            <Badge variant="outline" className={resource.role === 'hr' ? 'text-green-600' : 'text-purple-600'}>
                              {resource.role === 'hr' ? 'HR' : 'Candidate'}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              <Mail className="h-4 w-4 text-muted-foreground" />
                              {resource.email}
                            </div>
                          </TableCell>
                          <TableCell>{formatLastLogin(resource.lastLoginAt)}</TableCell>
                          <TableCell>
                            {agentInfo ? (
                              <Badge variant="outline" className="text-blue-600">
                                {agentInfo.firstName} {agentInfo.lastName}
                              </Badge>
                            ) : (
                              <Badge variant="outline" className="text-gray-500">
                                Unassigned
                              </Badge>
                            )}
                          </TableCell>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => openAllocationDialog(resource)}
                              >
                                <Edit className="h-4 w-4 mr-1" />
                                Reassign
                              </Button>
                              <Button variant="ghost" size="sm">
                                <Eye className="h-4 w-4 mr-1" />
                                View
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      );
                    })}
                  </TableBody>
                </Table>
              )}
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      {/* Allocation Dialog */}
      <Dialog open={isAllocationDialogOpen} onOpenChange={setIsAllocationDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>
              {allocationTab === 'not-allocated' ? 'Allocate' : 'Reassign'} {selectedResource?.firstName} {selectedResource?.lastName}
            </DialogTitle>
            <DialogDescription>
              Select an agent to {allocationTab === 'not-allocated' ? 'assign' : 'reassign'} this {selectedResource?.role === 'hr' ? 'HR user' : 'candidate'} to.
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="agent-select">Select Agent</Label>
              <Select value={selectedAgent} onValueChange={setSelectedAgent}>
                <SelectTrigger>
                  <SelectValue placeholder="Choose an agent..." />
                </SelectTrigger>
                <SelectContent>
                  {agents.map((agent) => (
                    <SelectItem key={agent._id} value={agent._id}>
                      {agent.firstName} {agent.lastName} ({agent.email})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="notes">Assignment Notes (Optional)</Label>
              <Textarea
                id="notes"
                placeholder="Add notes about this allocation..."
                value={assignmentNotes}
                onChange={(e) => setAssignmentNotes(e.target.value)}
                rows={3}
              />
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setIsAllocationDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleSaveAllocation} disabled={loading || !selectedAgent}>
              {loading ? <LoadingSpinner /> : <Save className="h-4 w-4 mr-2" />}
              {loading ? 'Allocating...' : 'Allocate'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}